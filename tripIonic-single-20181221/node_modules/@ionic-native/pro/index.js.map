{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/pro/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, CordovaCheck, CordovaInstance, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\n/**\n * Information about the currently running app\n */\nexport interface AppInfo {\n  platform: string;\n  platformVersion: string;\n  version: string;\n  bundleName: string;\n  bundleVersion: string;\n}\n\n/**\n * Information about the current live update\n */\nexport interface DeployInfo {\n  deploy_uuid: string;\n  channel: string;\n  binary_version: string;\n}\n\n/**\n * Object for manually configuring deploy\n */\nexport interface DeployConfig {\n  appId?: string;\n  host?: string;\n  channel?: string;\n}\n\nexport type ProgressMessage = number | string;\n\n/**\n * @hidden\n */\nexport class ProDeploy {\n\n  constructor(private _objectInstance: any) { }\n\n  /**\n   * Re-initialize Deploy plugin with a new App ID and host.  Not used in most cases.\n   * @param config A valid Deploy config object\n   */\n  @CordovaInstance()\n  init(config: DeployConfig): Promise<void> { return; }\n\n  /**\n   * Check a channel for an available update\n   * @return {Promise<string>} Resolves with 'true' or 'false', or rejects with an error.\n   */\n  @CordovaInstance()\n  check(): Promise<string> { return; }\n\n  /**\n   * Download an available version\n   * @return {Observable<ProgressMessage>} Updates with percent completion, or errors with a message.\n   */\n  @CordovaInstance({\n    observable: true\n  })\n  download(): Observable<ProgressMessage> { return; }\n\n  /**\n   * Unzip the latest downloaded version\n   * @return {Observable<ProgressMessage>} Updates with percent completion, or errors with a message.\n   */\n  @CordovaInstance({\n    observable: true\n  })\n  extract(): Observable<ProgressMessage> { return; }\n\n  /**\n   * Reload app with the deployed version\n   */\n  @CordovaInstance()\n  redirect(): Promise<void> { return; }\n\n  /**\n   * Get info about the version running on the device\n   * @return {Promise<DeployInfo>} Information about the current version running on the app.\n   */\n  @CordovaInstance()\n  info(): Promise<DeployInfo> { return; }\n\n  /**\n   * List versions stored on the device\n   */\n  @CordovaInstance()\n  getVersions(): Promise<string[]> { return; }\n\n  /**\n   * Delete a version stored on the device by UUID\n   * @param version A version UUID\n   */\n  @CordovaInstance()\n  deleteVersion(version: string): Promise<void> { return; }\n}\n\n/**\n * @name Pro\n * @description\n * This plugin enables Ionic Pro services like live updates and error monitoring\n *\n * @usage\n * ```typescript\n * import { Pro, AppInfo, DeployInfo } from '@ionic-native/pro';\n *\n *\n * constructor(private pro: Pro) { }\n *\n * // Get app info\n * this.pro.getAppInfo().then((res: AppInfo) => {\n *   console.log(res)\n * })\n *\n * // Get live update info\n * this.pro.deploy.info().then((res: DeployInfo) => {\n *   console.log(res)\n * })\n * ```\n */\n@Plugin({\n  pluginName: 'Pro',\n  plugin: 'cordova-plugin-ionic',\n  pluginRef: 'IonicCordova',\n  repo: 'https://github.com/ionic-team/cordova-plugin-ionic',\n  platforms: ['Android', 'iOS'],\n  install: 'ionic cordova plugin add cordova-plugin-ionic --save --variable APP_ID=\"XXXXXXXX\" --variable CHANNEL_NAME=\"Channel\"'\n})\n@Injectable()\nexport class Pro extends IonicNativePlugin {\n  _deploy: ProDeploy;\n\n  /**\n   * Ionic Pro Deploy .js API.\n   */\n  @CordovaCheck({ sync: true })\n  deploy(): ProDeploy {\n    if (this._deploy) {\n      return this._deploy;\n    } else {\n      this._deploy = new ProDeploy(Pro.getPlugin().deploy);\n      return this._deploy;\n    }\n  }\n\n  /**\n   * Not yet implemented\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  enableCrashLogging(): Promise<any> { return; }\n\n  /**\n   * Not yet implemented\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  checkForPendingCrash(): Promise<any> { return; }\n\n  /**\n   * Not yet implemented\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  loadPendingCrash(): Promise<any> { return; }\n\n  /**\n   * Not yet implemented\n   * @return {Promise<any>} Returns a promise that resolves when something happens\n   */\n  @Cordova()\n  forceCrash(): Promise<any> { return; }\n\n  /**\n   * Get information about the currently running app\n   * @return {Promise<any>} Returns a promise that resolves with current app info\n   */\n  @Cordova()\n  getAppInfo(): Promise<AppInfo> { return; }\n}\n\n"]}